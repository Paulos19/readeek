// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  POST
  CHALLENGE
  EXCERPT
}

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String?
  coverUrl        String?
  filePath        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  progress        Int      @default(0)
  currentLocation String?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  posts     Post[]
  Highlight Highlight[]
}

model Post {
  id        String   @id @default(cuid())
  content   String   @db.Text
  type      PostType @default(POST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Relação para respostas (comentários aninhados)
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")
}

model Reaction {
  id    String @id @default(cuid())
  emoji String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, emoji])
}

model Highlight {
  id        String   @id @default(cuid())
  cfiRange  String   @db.Text // Localização precisa do trecho no EPUB
  text      String   @db.Text // O texto do trecho
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)

  accounts  Account[]
  sessions  Session[]
  books     Book[]
  posts     Post[]
  comments  Comment[]
  reactions Reaction[]
  Highlight Highlight[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
