// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -- ENUMS --
enum PostType {
  POST
  CHALLENGE
  EXCERPT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

enum InsigniaType {
  FREE
  PREMIUM
}

enum UserRole {
  USER
  ADMIN
}

// NOVO ENUM PARA CARGOS NA COMUNIDADE
enum CommunityRole {
  OWNER
  HONORARY_MEMBER
  MEMBER
}

// -- MODELS --

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String            @unique
  password             String
  emailVerified        DateTime?
  image                String?
  role                 UserRole          @default(USER)
  about                String?           @db.Text
  profileVisibility    ProfileVisibility @default(PUBLIC)
  credits              Int               @default(50)
  displayedInsigniaIds String[]

  // Relações existentes
  accounts         Account[]
  sessions         Session[]
  books            Book[]
  posts            Post[]
  comments         Comment[]
  reactions        Reaction[]
  Highlight        Highlight[]
  sentRequests     BookRequest[]     @relation("SentRequests")
  receivedRequests BookRequest[]     @relation("ReceivedRequests")
  insignias        InsigniasOnUsers[]
  following        Follows[]         @relation("follower")
  followers        Follows[]         @relation("following")

  // Relações da Comunidade
  ownedCommunities       Community[]           @relation("OwnedCommunities")
  communityMemberships   CommunityMember[]     @relation("CommunityMemberships")
  uploadedCommunityFiles CommunityFile[]
  communityPosts         CommunityPost[]       @relation("CommunityPosts")
  communityComments      CommunityComment[]
  communityReactions     CommunityReaction[]
  communityPostReports   CommunityPostReport[]
  bannedFrom             BannedFromCommunity[]
}

model Follows {
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Book {
  id              String        @id @default(cuid())
  title           String
  author          String?
  coverUrl        String?
  filePath        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  progress        Int           @default(0)
  currentLocation String?
  sharable        Boolean       @default(false)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts           Post[]
  Highlight       Highlight[]
  requests        BookRequest[] @relation("RequestedBook")
}

model BookRequest {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  status      RequestStatus @default(PENDING)
  bookId      String
  book        Book          @relation("RequestedBook", fields: [bookId], references: [id], onDelete: Cascade)
  requesterId String
  requester   User          @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  ownerId     String
  owner       User          @relation("ReceivedRequests", fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([bookId, requesterId])
}

model Insignia {
  id          String             @id @default(cuid())
  name        String
  description String
  imageUrl    String
  type        InsigniaType       @default(FREE)
  price       Int?
  users       InsigniasOnUsers[]
}

model InsigniasOnUsers {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  insignia   Insignia @relation(fields: [insigniaId], references: [id], onDelete: Cascade)
  insigniaId String
  assignedAt DateTime @default(now())

  @@id([userId, insigniaId])
}

model Post {
  id             String    @id @default(cuid())
  content        String    @db.Text
  type           PostType  @default(POST)
  progressAtPost Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId         String
  book           Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  comments       Comment[]
  reactions      Reaction[]
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
}

model Reaction {
  id     String @id @default(cuid())
  emoji  String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, emoji])
}

model Highlight {
  id        String   @id @default(cuid())
  cfiRange  String   @db.Text
  text      String   @db.Text
  color     String   @default("rgba(255, 255, 0, 0.4)")
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -- COMMUNITY MODELS --

model Community {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  visibility  String
  password    String?
  ownerId     String
  owner       User     @relation("OwnedCommunities", fields: [ownerId], references: [id], onDelete: Restrict)
  members     CommunityMember[]
  files       CommunityFile[]
  posts       CommunityPost[]
  bannedUsers BannedFromCommunity[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommunityMember {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation("CommunityMemberships", fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  role        CommunityRole @default(MEMBER)
  createdAt   DateTime      @default(now())

  @@unique([userId, communityId])
}

model BannedFromCommunity {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  bannedAt    DateTime  @default(now())

  @@unique([userId, communityId])
}

model CommunityFile {
  id          String    @id @default(cuid())
  title       String
  author      String?
  coverUrl    String?
  fileUrl     String
  fileType    String
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  uploaderId  String
  uploader    User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model CommunityPost {
  id          String                @id @default(cuid())
  content     String
  authorId    String
  author      User                  @relation("CommunityPosts", fields: [authorId], references: [id], onDelete: Cascade)
  communityId String
  community   Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  comments    CommunityComment[]
  reactions   CommunityReaction[]
  reports     CommunityPostReport[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model CommunityComment {
  id        String            @id @default(cuid())
  content   String
  authorId  String
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      CommunityPost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now())
  parentId  String?
  parent    CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   CommunityComment[] @relation("CommentReplies")
}

model CommunityReaction {
  id        String        @id @default(cuid())
  emoji     String
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())

  @@unique([userId, postId])
}

model CommunityPostReport {
  id         String        @id @default(cuid())
  postId     String
  post       CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporterId String
  reporter   User          @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reason     String?
  resolved   Boolean       @default(false)
  createdAt  DateTime      @default(now())
}